
function showSubCatWithRightOptionsAvailable() {
  // theoretically they can never select unknown...
  var type = document.getElementById("category_select").value; // category like "profanity"
  var subcategory_select = document.getElementById("subcategory_select_id");
  var width_needed = 0;
  for (var i=0; i < subcategory_select.length; i++){
    var option = subcategory_select.options[i];
    var cat_from_subcat = option.text.split(" ")[0]; // profanity
    if (cat_from_subcat != type && option.text.includes(" -- ")) {
      option.style.display = "none";
    }
    else {
      option.style.display = "block";
      width_needed = Math.max(width_needed, option.offsetWidth);
    }
  }
  resizeToCurrentSize(subcategory_select); // it probably reset to the top option of a new category [so new size]  
}

function resizeToCurrentSize(to_resize) { // requires hidden select also in doc for now :|
       var hidden_opt = document.getElementById("hidden_select_option_id");
       hidden_opt.innerHTML = to_resize.options[to_resize.selectedIndex].textContent;
       var hidden_sel = document.getElementById("hidden_select_id");
       hidden_sel.style.display = ""; // show it
       to_resize.style.width = hidden_sel.clientWidth + "px";
       hidden_sel.style.display = "none";
}

function setImpactIfMute() {
       var action_sel = document.getElementById("action_sel");
       var selected = action_sel.options[action_sel.selectedIndex].textContent;
       if (selected == "mute") {
         document.getElementById("impact_to_movie_id").options.selectedIndex = 1; // == "1/10"
       }
}

function isYoutubePimw() {
  return (typeof youtube_pimw_player !== 'undefined');
}

function getEndSpeedOrAlert(value) {
  var re = /(\d\.\d+)x$/;
  var match = re.exec(value);
  if (match) {
    if (!isYoutubePimw() || youtube_pimw_player.getAvailablePlaybackRates().includes(parseFloat(match[1]))) {    
      return parseFloat(match[1]);
    }
  }
  // failure of some kind er other...
  if (isYoutubePimw()) {
      var out = "you need to enter the speed you want in the details like 'my_details 2.0x' or 'my_details 0.5x' (options:";
      var rates = youtube_pimw_player.getAvailablePlaybackRates();
      for (var i = 0; i < rates.length; i++) {
        out += rates[i].toFixed(2) + "x,";
      }
      alert(out + ") [0.25 has no audio]");
  } else {
      alert("you need to enter the speed you want in the details like 'my_details 2.0x' or 'my_details 0.5x' (goes up to 4.0x, down to 0.5x with audio)");
  }
  return null;
}

function getAudioPercentOrAlert(value) {
  var re = /(\d+)%$/;
  var match = re.exec(value);
  if (match) {
    return parseFloat(match[1]);
  }
  alert("you need to enter the audio percent you want, like 'my_details 5%' [at least 5% if youtube]");
  return null;
}

function doubleCheckValues() {
  var category = document.getElementById('category_select').value;
  if (category == "") {
    alert("please select category first");
    return false;
  }
  
  var age = document.getElementById('age_maybe_ok_id').value;
  
  if (document.getElementById('subcategory_select_id').value == "") {
    alert("please select subcategory first");
    return false;
  }
  var impact = document.getElementById('impact_to_movie_id').value;
  if (impact == "0") {
    alert("please select impact to story");
    return false;
  }
  var details = document.getElementById('details_input_id').value;
  if (details == "") {
    alert("please enter tag details");
    return false;
  }
  var action = document.getElementById('action_sel').value;
  
  if (action == "change_speed" && !getEndSpeedOrAlert(details)) {
    return false;
  }
  if (action == "set_audio_volume" && !getAudioPercentOrAlert(details)) {
    return false;
  }
 
  // XXXX don't really need anymore... 
  if (isYoutubePimw() && (action == "mute" || action == "mute_audio_no_video")) {
    alert("we seemingly aren't allowed to do mutes for youtube, you can either skip or change the volume to low [5%], instead");
    return false;
  }
  if (isYoutubePimw() && action == "yes_audio_no_video") {
    alert("we can't do no_video for youtube, just skip instead");
    return false;
  }
  
  if ((category == "violence" || category == "suspense") && age == "0") {
    alert("for violence or suspense tags, please also select a value in the age specifier dropdown");
    return false;
  }
  var start = humanToTimeStamp(document.getElementById('start').value);
  var endy = humanToTimeStamp(document.getElementById('endy').value);
  if (start == 0) {
    alert("Can't start at zero, please select 0.01s if you want one that starts near the beginning");
    return false;
  }
  if (start >= endy) {
    alert("end is not after the start, double check timestamps...");
    return false;
  }
  if (endy - start > 60*15) {
    alert("tag is more than 15 minutes long? This should not typically be expected? check timestamps, if you do need it this long, let us know...");
    return false;
  }
  return true;
}

function tagsCreated() {
  // they call this when we're ready to setup shtuff, somehow necessary :|
  
  document.getElementById('action_sel').addEventListener(
     'change',
     setImpactIfMute,
     false
  );
  setImpactIfMute(); // the default is mute so set it up as we'd anticipate :|
  var subcat_select = document.getElementById("subcategory_select_id");
  resizeToCurrentSize(subcat_select);
  subcat_select.addEventListener(
       'change',
       function() {
         if (subcat_select.options[subcat_select.selectedIndex].value == "joke edit") {
           alert("for joking edits please set default_enabled as False, then you can create your own personalized edit list where you modify it to get a mute or skip, that way for default user playback it isn't edited out");
           document.getElementById('default_enabled_id').value = 'false';
         }
        },
       false
  ); 
}

function htmlDecode(input) // I guess typically we inject "inline" which works fine <sigh> but not for value = nor alert ... I did DB wrong
{
  var doc = new DOMParser().parseFromString(input, "text/html");
  return doc.documentElement.textContent;
}
