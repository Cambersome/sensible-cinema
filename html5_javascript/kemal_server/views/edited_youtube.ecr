<div id="player_with_controls" style="width: 100%;"> <!-- width for fullscreen needed it -->
  <div id="ytplayer_wrapper_div_id" style="width: 100%; height: 90%;"> <!-- need wrapper div so when youtube gets small, doesn't rejostle everything -->
    <div id="ytplayer_div"></div>
  </div>
  <h3 style="margin-top: 5px;">
    <!-- play button -->
    <big>
    <a href='' onclick="youtube_pimw_player.playVideo(); return false">&#9654;</a>&nbsp;&nbsp;<a href='' onclick="youtube_pimw_player.pauseVideo(); return false">&#9612;&#9612;</a>
    </big>
    Seek:<br>
    <input id="seek-control-id" type="range" min="0" max="100" step="1" style="width: 100%; display:inline; margin-top: 10px;"></input> <!-- mobile you want it big -->
    <br>
    <br>
    <a href='' onclick="seekToDelta(-10); return false">-10s</a>
    <a href='' onclick="seekToDelta(10); return false">+10s</a>
    <!-- time -->
    <div id="current_time_id" style="display: inline;"></div>
    <!-- fullscreen -->
    Go <a href='' onclick="toggleFullScreen(); return false">Fullscreen</a>

    <br/>
    Volume:<input id="vol-control-id" type="range" min="0" max="100" step="1" oninput="SetVolume(this.value)" onchange="SetVolume(this.value)" style="max-width: 100px; display:inline;"></input>
    Resolution: <div id="quality_div_id" style="display: inline;"></div>
    <input id="hd_checkbox_id" type="checkbox" onchange="hd_checkbox_changed(this.checked);">
    <a href=# onclick="hd_checkbox_changed(true); return false;">use max</a>.
  </h3>

</div>

<div id="below_vid_stuff">
  <h2 id="youtube_name_header_id"><%= url ? url.name + " (Edited)" : "youtube not in our edited system yet, please click 'unedited' in the black box below the movie to add it!" %></h2>
  Seeing closed captions? To toggle them off (we recommend off) go <a href="https://youtu.be/<%= youtube_id %>">here</a> and turn them off.
  <br/>
  Legal disclaimer: Performance of the picture is altered from the performance intended by the director or copyright holder of the motion picture. (we're required by law to say that).
  <br/>

  Edited controls:
  <% if editor?(env) %>
    Editor: <a href="" onclick='document.getElementById("player_with_controls").style.height = "60%"; document.getElementById("below_vid_stuff").style.display="none"; return false;'>Click here to make video smaller for easier editing!</a>
  <% end %>

  <!-- match amazon coloring for my stuff :| -->
  <style>
  input,select {
    color: black;
  }
  </style>

</div>
<div style="height: 760px; max-width: 620px; background: black;" id="show_your_instructions_here_id"> <!-- plugin binds here --></div>


<% if editor?(env) %>
<h3>Editor: Create new other (youtube)</h3>
Enter url of movie here:
<form action="/new_manual_url" method="GET">Your Movie's url: <input type="text" name="url"/>
  <input type="submit" value="Submit">
</form>
<br/>
<% end %>

Watch this youtube <a href="https://youtu.be/<%= youtube_id %>">unedited</a>. <!-- in case it matches youtube's terms of use better -->
<br/>
<a href=/terms_of_service_youtube>Terms of use (including Youtube's)</a>.
<br/>
<a href=/privacy>Privacy policy (including Youtube's)</a>.

<script>
    function SetVolume(val)
    {
      console.log("setting volume=" + val);
      youtube_pimw_player.setVolume(val);
      window.localStorage.setItem("youtube_volume", val); // for restarts
    }

    function hd_checkbox_changed(to_this) {
      console.log("checkbox changed=" + to_this);
      window.localStorage.setItem("hd_checkbox_checked", to_this);
      if (to_this) {
        var desired = youtube_pimw_player.getAvailableQualityLevels()[0];
        youtube_pimw_player.setPlaybackQuality(desired);
        console.log("setting it to HD=" + youtube_pimw_player.getPlaybackQuality() + " desired=" + desired); // even setting this to 1080p does "nothing" if the viewing window is too small
      }
      document.getElementById('hd_checkbox_id').checked = to_this;
    }

    function seekToDelta(delta) {
      youtube_pimw_player.seekTo(youtube_pimw_player.getCurrentTime() + delta);
    }

    function seekToPercentageHere(val) {
      var desired_time_seconds = youtube_pimw_player.getDuration() / 100.0 * val;
      console.log("built-in slider seeking to " + desired_time_seconds);
      youtube_pimw_player.seekTo(desired_time_seconds);
    }

    function setTime(val) {
      youtube_pimw_player.setVolume(val);
    }

    var seek_dragger = document.getElementById('seek-control-id');
    var seek_dragger_being_dragged_here = false;
    function updateTime() {
      if (!seek_dragger_being_dragged_here) {
        seek_dragger.value = youtube_pimw_player.getCurrentTime() / youtube_pimw_player.getDuration() * 100;
        document.getElementById('current_time_id').innerHTML = timeStampToHumanHere(youtube_pimw_player.getCurrentTime(), 0) + "/" + timeStampToHumanHere(youtube_pimw_player.getDuration(), 0);
      }
      document.getElementById('quality_div_id').innerHTML = youtube_pimw_player.getPlaybackQuality();
    }

    addListenerMultiHere(seek_dragger, "mousedown touchstart", function() {
      seek_dragger_being_dragged_here = true;
      console.log("start drag");
    });

    addListenerMultiHere(seek_dragger, "mousemove touchmove", function() {
       // if seek_dragger_being_dragged_here ???
        var desired_time_seconds = youtube_pimw_player.getDuration() / 100.0 * this.value;
        document.getElementById('current_time_id').innerHTML = timeStampToHumanHere(desired_time_seconds, 0) + "/" + timeStampToHumanHere(youtube_pimw_player.getDuration(), 0);
        // but don't seek yet :)
    });

    addListenerMultiHere(seek_dragger, "mouseup touchend", function() {
      seek_dragger_being_dragged_here = false;
      console.log("end drag");
      seekToPercentageHere(this.value);
    });


    function toggleFullScreen() {
      var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement;

      if (fullscreenElement) {
        exitFullScreen(); // from plugin
        return;
      }
      // var iframe = document.getElementById("player_with_controls");
      var iframe = youtube_pimw_player.getIframe(); // no controls *at all*, but goes to *real fullscreen* :)

      var requestFullScreen = iframe.requestFullScreen || iframe.mozRequestFullScreen || iframe.webkitRequestFullScreen;
      if (requestFullScreen) {
        requestFullScreen.bind(iframe)();
      }
    }

    function timeStampToHumanHere(timestamp, tenth_digits) {
      var hours = Math.floor(timestamp / 3600);
      timestamp -= hours * 3600;
      var minutes  = Math.floor(timestamp / 60);
      timestamp -= minutes * 60;
      var seconds = timestamp.toFixed(tenth_digits); //  -> "12.3" or "2.3"
      // padding is "hard" apparently in javascript LOL
      if (hours > 0)
        return hours + "h " + minutes + "m " + seconds + "s";
      else
        return minutes + "m " + seconds + "s";
    }

    function addListenerMultiHere(element, eventNames, listener) {
      var events = eventNames.split(' ');
      for (var i=0, iLen=events.length; i<iLen; i++) {
        element.addEventListener(events[i], listener, false);
      }
    }


  // Load the IFrame Player API code asynchronously.
  var tag = document.createElement('script');
  tag.src = "https://www.youtube.com/player_api";
  var firstScriptTag = document.getElementsByTagName('script')[0];
  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

  // Replaces the 'ytplayer' element with an <iframe> and
  // YouTube player after the API code downloads.
  var youtube_pimw_player;
  function onYouTubePlayerAPIReady() {
    youtube_pimw_player = new YT.Player('ytplayer_div', { // might as well new it up here so it can start polling it more aggressively than "when its ready with 500ms polling" plus some setup logic gets confused without it already setup :|
      // if you modify something here modify player to revert back to match
      height: '100%', // default (no value) is 360px *hard coded* like...you have to set something here... ;|
      width: '100%',
      videoId: '<%= youtube_id %>',
      enablejsapi: true,
      playsinline: 1,
      playerVars: { 'fs': 1, 'controls': 0, 'rel': 0, 'playsinline': 1 },
      events: {
        'onReady': onPlayerReady,
         onStateChange: onPlayerStateChange
      }
    });
  }

function onPlayerReady(event) {
  console.log("youtube_player onPlayerReady! auto playing...");
  <% if !mobile?(env) && url %>
    event.target.playVideo(); // otherwise it can get in this weird pause state on android at least...
  <% end %>

  var start_vol = window.localStorage.getItem("youtube_volume") || 50; // default isn't 100? or seemed to be once...
  SetVolume(start_vol);
  document.getElementById('vol-control-id').value = start_vol; // waiting for 500ms seems whack but..but...
  var start_hd = window.localStorage.getItem("hd_checkbox_checked");
  setTimeout(function() {
      // sometimes this doesn't work if run ja [?]
      document.getElementById('vol-control-id').value = youtube_pimw_player.getVolume();
    }, 500);

    setTimeout(function() {
      if (start_hd && start_hd == "true") {
        hd_checkbox_changed(start_hd); // needed apparently
      } // default unchecked
    }, 1500); // doesn't even take at 500ms what XXXX

  setInterval(updateTime, 250); // only 4/sec because if they happen to do their "own" seek this could interfere and "seek to no where" (well, still could but more rare? :\  TODO

  // inject copy of plugin FTW :|
  var my_awesome_script = document.createElement('script');
  my_awesome_script.setAttribute('src','https://playitmyway.org/plugin_javascript/edited_generic_player.js');
  document.head.appendChild(my_awesome_script);
}

function onPlayerStateChange(event) {
    if(event.data === 0) {
        console.log('video just ended');
        exitFullScreen();
    }
}

</script>
