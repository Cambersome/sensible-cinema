<h2>Youtube edited
<br><%= url.name %></h2>

<div id="player_with_controls">
  <div id="ytplayer_div"></div>
  <br/>

  <h3>
  <a href='' onclick="youtube_pimw_player.playVideo(); return false">&#9654;</a>&nbsp;&nbsp;<a href='' onclick="youtube_pimw_player.pauseVideo(); return false">&#9612;&#9612;</a>
  volume:<input id="vol-control-id" type="range" min="0" max="100" step="1" oninput="SetVolume(this.value)" onchange="SetVolume(this.value)" style="max-width: 100px; display:inline;"></input>
  <div id="current_time_id" style="display: inline;"></div>
  seek:<input id="seek-control-id" type="range" min="0" max="100" step="1" oninput="seekTo(this.value)" style="max-width: 150px; display:inline;"></input><!-- not sure how to not super seek here on drag :| -->
  <a href='' onclick="toggleFullScreen(); return false">fullscreen</a> <!-- what about mobile to get out of this? -->
  </h3>
  
</div>

<!-- match amazon coloring for my stuff :| -->
<style>
input,select {
  color: black;
}
</style>

<div style="height: 760px; max-width: 620px; background: black;" id="show_your_instructions_here_id"> <!-- plugin binds here -->
</div>

<h3>Create new other (youtube)</h3>
Enter url of movie here:
<form action="/new_manual_url" method="GET">Your Movie's url: <input type="text" name="url"/>
  <input type="submit" value="Submit">
</form>

<script>
// speed, quality (don't care), and a timer

    function SetVolume(val)
    {
      youtube_pimw_player.setVolume(val);
    }
    
    function seekTo(val) {
      var desired_time_seconds = youtube_pimw_player.getDuration() / 100.0 * val;
      console.log("built-in slider seeking to " + desired_time_seconds);
      youtube_pimw_player.seekTo(desired_time_seconds);
    }
    
    function setTime(val) {
      youtube_pimw_player.setVolume(val);
    }
    
    function timeStampToHumanHere(timestamp) {
      var hours = Math.floor(timestamp / 3600);
      timestamp -= hours * 3600;
      var minutes  = Math.floor(timestamp / 60);
      timestamp -= minutes * 60;
      var seconds = timestamp.toFixed(1); //  -> "12.3" or "2.3"
      // padding is "hard" apparently in javascript LOL
      if (hours > 0)
        return hours + "h " + minutes + "m " + seconds + "s";
      else
        return minutes + "m " + seconds + "s";
    }
    
    
    function updateTime() {
      current_time_id.innerHTML=timeStampToHumanHere(youtube_pimw_player.getCurrentTime()) + "/" + timeStampToHumanHere(youtube_pimw_player.getDuration());
      document.getElementById('seek-control-id').value = youtube_pimw_player.getCurrentTime() / youtube_pimw_player.getDuration() * 100; 
    }
    
    function toggleFullScreen() {
      var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement;
    
      if (fullscreenElement) {
        exitFullScreen(); // from plugin
        return;
      }
      // var iframe = document.getElementById("player_with_controls");
      var iframe = youtube_pimw_player.getIframe();
      var requestFullScreen = iframe.requestFullScreen || iframe.mozRequestFullScreen || iframe.webkitRequestFullScreen;
      if (requestFullScreen) {
        requestFullScreen.bind(iframe)();
      }
    }
    

  // Load the IFrame Player API code asynchronously.
  var tag = document.createElement('script');
  tag.src = "https://www.youtube.com/player_api";
  var firstScriptTag = document.getElementsByTagName('script')[0];
  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

  // Replaces the 'ytplayer' element with an <iframe> and
  // YouTube player after the API code downloads.
  var youtube_pimw_player;
  function onYouTubePlayerAPIReady() {
    youtube_pimw_player = new YT.Player('ytplayer_div', { // might as well new it up here so it can start polling it more aggressively than "when its ready with 500ms polling" plus some setup logic gets confused without it already setup :|
      height: '70%', // default 360 ;|
      width: '100%',
      videoId: '<%= youtube_id %>',
      enablejsapi: true,
      playerVars: { 'fs': 1, 'controls': 0 },
      events: {
        'onReady': onPlayerReady
      }
    });
  }
  // a.height "100%" youtube_pimw_player.getIframe()

function onPlayerReady(event) {
  console.log("youtube_player ready and setup! auto playing...");
  event.target.playVideo();
  document.getElementById('vol-control-id').value = youtube_pimw_player.getVolume(); // init isn't 100
  setInterval(updateTime, 1000/30);

  // inject plugin ftw :|  
  var my_awesome_script = document.createElement('script');
  my_awesome_script.setAttribute('src','https://playitmyway.org/plugin_javascript/edited_generic_player.js');
document.head.appendChild(my_awesome_script);
}

</script>
