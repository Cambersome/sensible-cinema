// copy and paste all of this text (including this line) into your developer tools javascript console side bar, then hit enter, please:

if (typeof clean_stream_timer !== 'undefined') {
  alert("clean stream already loaded...");
  throw "dont know how to load it twice"; // in case they click a plugin button twice :|
}

// generated at <%= Time.now %>.
// begin auto inserted unique for your movie:
var name="<%= name %>"; // movie name
var episode_name="<%= episode_name %>"; 
var mutes=<%= mutes %>;
var skips=<%= skips %>;
var yes_audio_no_videos=<%= yes_audio_no_videos %>;
var do_nothings=<%= do_nothings %>;
var expected_current_url="<%= url %>";
var amazon_episode_number=<%= db_url.amazon_episode_number %>;
var url_id=<%= db_url.id %>;
var request_host="<%= request_host %>"; // like localhost:3000
// end auto inserted unique stuffs

function getSanitizedCurrentUrl() {
  current_url = window.location.href;
  // and sanitize
  if (current_url.includes("amazon.com") || current_url.includes("netflix.com"))
    current_url = current_url.split("?")[0];
  current_url = current_url.replace("smile.amazon", "www.amazon");
  if (current_url.includes("/dp/") ) {
    id = current_url.split("/dp/")[1].split("/")[0]
    current_url = "https://www.amazon.com/gp/product/" + id
  }
  return current_url;
}

function getCurrentAmazonEpisode() {
  var subtitle = document.getElementsByClassName("subtitle")[0];
  if (subtitle &&  subtitle.innerHTML.match(/Ep. (\d+)/))
    return /Ep. (\d+)/.exec(subtitle.innerHTML)[1];
  else
    return "0"; // anything else
}


function findFirstVideoTag(node) {
    // there's probably a jquery way to do this easier :)
    if (node.nodeType == 1) {
        if (node.tagName.toUpperCase() == 'VIDEO') { // assume html 5 <VIDEO  ...
            return node;
        }
        node = node.firstChild;
 
        while (node) {
            if ((out = findFirstVideoTag(node)) != null) {
                return out;
            }
            node = node.nextSibling;
        }
    }
}

function areWeWithin(thisArray, cur_time) {
  for (key in thisArray) {
    var item = thisArray[key];
    var start_time = item[0];
    var end_time = item[1];
    if(cur_time > start_time && cur_time < end_time) {
      return item;
    }
  }
  return [false];
}

extra_message = "";

function checkStatus() {
  var cur_time = video_element.currentTime;
  var [last_start, last_end] = areWeWithin(mutes, cur_time);
  if (last_start) {
    if (!video_element.muted) {
      video_element.muted = true;
      timestamp_log("muted", cur_time, last_start, last_end);
      extra_message = "muted";
    }
  }
  else {
    if (video_element.muted) {
      video_element.muted = false;
      console.log("unmuted at=" + cur_time);
      extra_message = "";
    }
  }
  if (window.location.href.includes("netflix.com")) {
    handleNetflixSeekOrStop(cur_time);
  } 
  else {
     // youtube, amazon et al, sane seeks with no watching it :)    
    [last_start, last_end] = areWeWithin(skips, cur_time);
    if (last_start) {
      timestamp_log("seeking", cur_time, last_start, last_end);
      video_element.pause(); // have to do this before seek so it resumes? huh?
      video_element.currentTime = last_end; // seek past this split
      video_element.play(); // sometimes needed??
    }
  }  
  [last_start, last_end] = areWeWithin(yes_audio_no_videos, cur_time);
  if (last_start) {
    if (video_element.style.visibility != "hidden") {
      console.log("hiding video leaving audio ", cur_time, last_start, last_end);
      extra_message = "no video yes audio";
      video_element.style.visibility="hidden";
    }
  }
  else {
    if (video_element.style.visibility != "") {
      video_element.style.visibility=""; // non hidden :)
      console.log("unhiding video with left audio" + cur_time);
      extra_message = "";
    }
  }
  
  topLineEditDiv.innerHTML = " " + timeStampToHuman(cur_time) + " " + extra_message + " Add new edit:";
  jQuery("#playback_rate").html(video_element.playbackRate.toFixed(2) + "x");
  checkIfEpisodeChanged();
}

function currentEpisodeString() {
  if (getCurrentAmazonEpisode() != "0")
    return " episode:" + getCurrentAmazonEpisode() + " " + decodeURIComponent(episode_name);
  else
    return "";
  end
}

function checkIfEpisodeChanged() {
  if (getSanitizedCurrentUrl() != old_current_url || getCurrentAmazonEpisode() != old_amazon_episode) {
    alert("detected move to another video, from " + old_current_url + old_amazon_episode + " to " + getSanitizedCurrentUrl() + getCurrentAmazonEpisode() + "\nwill try to load its edited settings now for the new movie...");
    var loaded = false;
    var url = '//rawgit.com/rdp/sensible-cinema-edit-descriptors/master/' + encodeURIComponent (encodeURIComponent(getSanitizedCurrentUrl() +  ".ep" + getCurrentAmazonEpisode() + ".html5_edited.just_settings.rendered.js"));
    javascript:(function(e,s){e.src=s;e.onload=function(){loaded=true;};document.head.appendChild(e);})(document.createElement('script'), url);
    setTimeout(function() { 
      if (loaded == false)  {
        alert("unable to load for your switched to movie perhaps no edit for it exists?\nWill continue playing unedited, please create one then reload this page" + "\nurl=" + getSanitizedCurrentUrl() + " " + currentEpisodeString()); 
       mutes = []; skips = []; yes_audio_no_videos = []; // reset so it doesn't have last episodes edits
      }
      else {
       logReadyToGo();
      }
    }, 3000);
    // save them now so we don't do a re-request javascript on the next pass
    old_current_url = getSanitizedCurrentUrl();
    old_amazon_episode = getCurrentAmazonEpisode();
  }
}

function timestamp_log(message, cur_time, last_start, last_end) {
  local_message = message + " at " + cur_time + " start:" + last_start + " will_end:" + last_end;
  console.log(local_message);
}

function handleNetflixSeekOrStop(cur_time) {
    fast_forward_to_skip_speed = 1.01; // even 4 was barfing ?? with 1.25 barfs very rarely
    [last_start, last_end] = areWeWithin(skips, cur_time);
    if (last_start) {
        if (video_element.playbackRate == fast_forward_to_skip_speed) {
          console.log("still fast forwarding to " + last_end + " remaining=" + Math.round(last_end - cur_time));
          // already and still fast forwarding
        } else {
          // fast forward
          timestamp_log("begin fast forward while muted", cur_time, last_start, last_end);
          extra_message = "blanking and muting to skip";
          video_element.playbackRate = fast_forward_to_skip_speed; // seems to be its max or freezes [?]
          video_element.volume = 0;
          video_element.style.visibility="hidden";
        }
    } else {
       // not in a skip, did we just finish one?
       if (video_element.playbackRate == fast_forward_to_skip_speed) {
          console.log("cancel/done fast forwarding " + cur_time);
          extra_message = "";
          video_element.style.visibility="";// non hidden
          video_element.volume = 1;
          video_element.playbackRate = 1;
       }
    }
}

function setupDeveloper() {
  exposeEditScreenDiv = document.createElement('div');
  exposeEditScreenDiv.style.position = 'absolute';
  exposeEditScreenDiv.style.height = '30px';
  exposeEditScreenDiv.style.background = '#000000';
  exposeEditScreenDiv.style.zIndex = "99999999"; // on top :)
  exposeEditScreenDiv.style.backgroundColor = "rgba(0,0,0,0)"; // still see the video, but also see the text :)
  exposeEditScreenDiv.style.fontSize = "13px";
  exposeEditScreenDiv.innerHTML = `<a href=# onclick="addForNewEditToScreen()">Add edit</a>`;
  // and stay visible
  document.body.appendChild(exposeEditScreenDiv);

  topLineEditDiv = document.createElement('div');
  topLineEditDiv.style.position = 'absolute';
  //topLineEditDiv.style.width = '200px';
  topLineEditDiv.style.height = '30px';
  topLineEditDiv.style.background = '#000000';
  topLineEditDiv.style.zIndex = "99999999"; // on top :)
  topLineEditDiv.style.backgroundColor = "rgba(0,0,0,0)"; // still see the video, but also see the text :)
  topLineEditDiv.style.textShadow="2px 1px 0px white";
  topLineEditDiv.style.fontSize = "13px";
  topLineEditDiv.style.display = 'none';
  document.body.appendChild(topLineEditDiv);
  
  edlLayer = document.createElement('div');
  edlLayer.style.position = 'absolute';
  edlLayer.style.width = '500px';
  edlLayer.style.height = '30px';
  edlLayer.style.background = '#000000';
  edlLayer.style.zIndex = "99999999"; // on top :)
  edlLayer.style.backgroundColor = "rgba(0,0,0,0)"; // still see the video, but also see the text :)
  edlLayer.style.textShadow="2px 1px 0px white";
  edlLayer.style.fontSize = "13px";
  edlLayer.style.display = 'none';
  document.body.appendChild(edlLayer);
  
  // inject the HTML UI 
  edlLayer.innerHTML = `
  from:<textarea name='start' rows='1' cols='20' style='width: 150px; font-size: 12pt; font-family: Arial;' id='start'>0.00s</textarea>
  <input id='clickMe' type='button' value='set to now' onclick="document.getElementById('start').value = getCurrentVideoTimestampHuman();" />
  <br/>
  to:<textarea name='endy' rows='1' cols='20' style='width: 150px; font-size: 12pt; font-family: Arial;' id='endy'>0.00s</textarea>
  <input id='clickMe' type='button' value='set to now' onclick="document.getElementById('endy').value = getCurrentVideoTimestampHuman();" />
  <br/>
  action:
  <select name='default_action' id='new_action'>
    <option value='mute'>mute</option>
    <option value='skip'>skip</option>
    <option value='yes_audio_no_video'>yes_audio_no_video</option>
    <option value='do_nothing'>do_nothing</option>
  </select>
  <input type='submit' value='Test edit once' onclick="testCurrent();">
  <input type='submit' value='Save edit' onclick="saveEditButton();">
  <br/>
  <a href="#" onclick="video_element.playbackRate -= 0.1;">&lt;&lt;</a>
  <span id='playback_rate'>1.00x</span>
  <a href="#" onclick="video_element.playbackRate += 0.1;">&gt;&gt;</a>
  <a href="#" onclick="stepFrame();">step</a>
  <a href="#" onclick="video_element.play()">&#9654;</a>
  <a href="#" onclick="video_element.pause()">&#9612;&#9612;</a>
  `;
  
  
  // this doesn't do anything currently
  var editorExtensionId = "ogneemgeahimaaefffhfkeeakkjajenb";
  chrome.runtime.sendMessage(editorExtensionId, {action: "started"}, function(response) {
    console.log("response after sending started" + response);
  });
  jQuery(window).resize(function(){
    setEditedControlsToTopLeft();
  });
  setEditedControlsToTopLeft(); // and call immediately :)
}

function addForNewEditToScreen() {
  topLineEditDiv.style.display = ''; // visible forever LOL
  edlLayer.style.display = ''; // visible
}

function setEditedControlsToTopLeft() {
  // discover where the "currently viewed" top left actually is (not always 0,0 apparently)
  var doc = document.documentElement;
  var left = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);
  var top = (window.pageYOffset || doc.scrollTop)  - (doc.clientTop || 0);
  offset = 150; // allow kill amazon x-ray :|
  left += offset;
  exposeEditScreenDiv.style.left = (left - offset) + "px"; // real zero for this one :|
  exposeEditScreenDiv.style.top = top + "px";
  topLineEditDiv.style.left = left + "px"; 
  topLineEditDiv.style.top = top + "px";
  edlLayer.style.left = left + "px";
  edlLayer.style.top = (top + 30) + "px";

}

function addToCurrentEditArray() {
  start = humanToTimeStamp(document.getElementById('start').value);
  endy = humanToTimeStamp(document.getElementById('endy').value);
  if (endy <= start) {
    alert("seems your end is before your start, please fix!");
    return; // abort
  } 
  currentEditArray().push([start, endy]);
  return [start, endy];
}

function currentTestAction() {
  return document.getElementById('new_action').value;
}

function testCurrent() {
  if (currentTestAction() == 'do_nothing') {
    alert('testing a do nothing is hard, please set it to yes_audio_no_video, test it, then set it back to do_nothing, then hit save button');
    return; // abort
  }
  var [start, endy] = addToCurrentEditArray();
  // shenanigans as required to actually seek html5 video
  video_element.pause();
  video_element.currentTime = start - 2; 
  video_element.play();
  length = endy - start;
  if (currentTestAction() == 'skip') 
    length = 0; // it skips it, so the amount of time before reverting is less it :)
  wait_time_millis = (length + 2 + 0.1)*1000; 
  setTimeout(function() {
    currentEditArray().pop();
  }, wait_time_millis)
}

function currentEditArray() {
  switch (currentTestAction()) {
    case 'mute':
      return mutes;
    case 'skip':
      return skips;
    case 'yes_audio_no_video':
      return yes_audio_no_videos;
    case 'do_nothing':
      return do_nothings;
    default:
      alert('internal error 1...'); // hopefully never see this
  }
}

function getCurrentVideoTimestampHuman() {
  return timeStampToHuman(video_element.currentTime);
}

function timeStampToHuman(timestamp) {
  var hours = Math.floor(timestamp / 3600);
  timestamp -= hours * 3600;
  var minutes  = Math.floor(timestamp / 60);
  timestamp -= minutes * 60;
  var seconds = timestamp.toFixed(2); //  -> "12.30";
  // padding is "hard" apparently in javascript LOL
  if (hours > 0)
    return hours + "h " + minutes + "m " + seconds + "s";
  else
    return minutes + "m " + seconds + "s";
}

function removeA(arr) {
    var what, a = arguments, L = a.length, ax;
    while (L > 1 && arr.length) {
        what = a[--L];
        while ((ax= arr.indexOf(what)) !== -1) {
            arr.splice(ax, 1);
        }
    }
    return arr;
}

function humanToTimeStamp(timestamp) {
  // 0h 17m 34.54s
  sum = 0.0
  split = timestamp.split(/[hms ]/)
  removeA(split, "");
  split.reverse();
  for (var i = 0; i < split.length; i++) {
    sum += parseFloat(split[i]) * Math.pow(60, i);
  }
  return sum;
}

function saveEditButton() {

  var url = "http://" + request_host + "/add_edl/" + url_id + '?start=' + document.getElementById('start').value + 
  "&endy=" + document.getElementById('endy').value + "&default_action=" + currentTestAction();
  console.log(url);
  var win = window.open(url, '_blank');
  addToCurrentEditArray(); // and leave it there
}

function stepFrame() {
  video_element.play();
  setTimeout(function() { 
    video_element.pause(); 
    console.log("current timestamp=" + video_element.currentTime); 
  }, 1/30*1000); // theoretically about a frame worth :)
}

if (getSanitizedCurrentUrl() != expected_current_url) {
  alert("danger: appears you may have pasted to the wrong path this_page=" + window.location.href + " cuts from=" + expected_current_url);
}
old_current_url = getSanitizedCurrentUrl(); // remember which one we started on

if (getCurrentAmazonEpisode() != amazon_episode_number) {
  alert("danger: may have gotten wrong amazon episode expected=" + amazon_episode_number + " got=" + getCurrentAmazonEpisode());
}
old_amazon_episode = getCurrentAmazonEpisode();

function start() {
  video_element = findFirstVideoTag(document.body);
  if (video_element == null) { 
    alert("failure: unable to find a video playing, did you paste this in the right page?"); 
  }
  else {
    setupDeveloper();
    clean_stream_timer = setInterval(function () {
        checkStatus();
    }, 1000 / 30 / 2 ); // 30 fps * 2, try to be frame accurate assume max 30 fps
    logReadyToGo();
  }
}

function logReadyToGo() {
    var message = "ready to go edited\n" + name + " " + currentEpisodeString() + "\nskips=" + skips.length + " mutes=" + mutes.length +"\nyes_audio_no_videos=" + yes_audio_no_videos.length + "\nyou may close developer javascript console now";
    console.log(message);
    <%= "alert(message);" if !File.exists?("./this_is_development") %>
}

// load jquery first, just cuz
javascript:(function(e,s){e.src=s;e.onload=function(){jQuery.noConflict();start();};document.head.appendChild(e);})(document.createElement('script'),'//code.jquery.com/jquery-latest.min.js')

// how to load self snippet moved to elsewhere
