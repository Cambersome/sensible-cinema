Sensible-cinema is a program that allows you to do edit-decision-list scene selection (i.e. "mute out" 
or "bleep out" bad scenes) on arbitrary players like netflix online, vlc.

Currently it takes as input a list of known "skip-worthy" scenes (profanity, violence, annoying songs, whatever you don't like). 
It then tracks the player you are using, as it is playing, and mutes or blanks out the system screen appropriately, 
during the scenes specified.

Currently it is programmed out of the box to work with hulu and VLC player on windows.  It isn't hard to 
add new players,and probably wouldn't be super hard to add more operating systems.

The concept isn't all that novel: http://en.wikipedia.org/wiki/Edit_decision_list

== How to use ==

Start playing your movie in its player, then startup sensible-cinema thus:

     C:\> jruby -S sensible-cinema

It then prompts you for a scene list file (ex: bambi.yml), 
and then subsequently for a player description file (ex: hulu_full_screen_with_total_length_over_an_hour.yml).

You could also specify those two filenames on the command-line, if desired, like

     C:\> jruby -S sensible-cinema mute_list.yml player_description.yml

Sensible-cinema will now run in your console window, screen tracking the player's timer to monitor the playback position
and react appropriately.

You'll know that it's working if, when you change the time of your player (ex: dragging it to a new spot 
in the playback), the screen output in sensible-cinema's console should change to match the new time.

It is presumed that you'll then minimize the console window and enjoy the movie.

== How to install ==

First you'll need to install jruby (in case you haven't already), from http://www.jruby.org
Make sure you check the box "add it to my path" or something similar to that.

Next install the gem by either opening up the command window or hitting windows+r (run) and typing

       C:\> jruby -S gem install sensible-cinema 

  it's jruby only currently (since jruby allows for proper thread concurrency, has an easy GUI, and feels actually sane on windows).
  It could theoretically be ported to MRI 1.9.2, if anybody wanted to do so.
  Also if anybody would be interested in porting this to Linux I'd be happy to collaborate.
  
You can test that it's installed by running it (see above) and selecting the "example_scene_list.yml", and 
choosing the hulu player.

It will proceed do a few "demo" mutes and blank outs.

== Programming Scenes ==

To program sensible-cinema to play as you'd like, create an edit decision list for it.

An Edit Decision List (EDL) looks something likelike this:

mutes:
  "01:00:00" : "01:01:02.5" # mute from exactly one hour to one hour, one minute, two seconds and a half will be muted.
blank_outs:
  "01:00:00" : "01:01:02.5" # also blank out (overlay with blank window) the abve muted scene.

Here's one with more detail

http://github.com/rdp/sensible-cinema/blob/master/zamples/scene_lists/example_scene_list.yml

Basically your job is to save a file like that somewhere, then start sensible-cinema and instruct it to use your new file.

Once you have created a new file for a common media, you can submit it back [1] to have it incorporated 
with sensible-cinema for others to use, as well.

So here is the current easiest way to create you scene list.
First create a blank file, and select it as startup time in sensible-cinema (even though it's still blank).
Now "as you watch" the movie, we're going to edit and test that file.
As you watch and a questionable section is discovered, go back in your player, then just before and just after 
the scene, hit the space bar *in the sensible-cinema window*.
This will output the current time each time you hit the space bar. If your timestamps look reasonable, add them to you
scene list (changes will be automatically picked up), then review your edited scene by rewinding your player
and letting it play through the scene in question.  It should now skip it appropriately.  If not, 
adjust your timestamps and try again.

So you could basically notice something you want to add to the list, add it to the file, then go back a few seconds 
in your media player, and it should now be muted/blanked out automatically.

[1] http://github.com/rdp/sensible-cinema/issues

== FAQ ==

Q. Can I watch movies this way on my TV, not just on my computer?

A. Not yet. And maybe.  Currently you'll either need to attach your computer to your TV
   (buy some long cables, or a new graphics card, etc.) or get some computer that you can move closer to the TV and do the same 
   (ex: buy a used older laptop with s-video out, use that).
   I'd be happy to do a linux port of sensible-cinema if anybody requests it for their dedicated TV computer.
   There has also been some work toward getting your computer to stream "live" to your wii/ps3/xbox.
   github message me if you're interested in trying it out!

Q. What movies are available to watch online?

A. Not many are available free (hulu, youtube have a few), but Netflix has quite a few for its default subscription.  
   Plus you can watch your existing DVD's on your computer, or rent or borrow them and watch them there.

Q. Why does my mouse bounce up and down while this thing is playing?

A. This enables your player to keep its on-screen time tracker, which in turn allows sensible-cinema to track where 
   you're at.  Message me if this bugs you too much and we'll see what we can do for it.

Q. Why does it seem really laggy at screen detection at the beginning?

A. It takes it awhile to warm up.  Ping me if you want this fixed.

== Thanks ==

Thanks to Jarmo for the win32-screenshot gem, and the mini_magick gem authors, jruby guys, etc.  
Made programming this actually somewhat a pleasure.

== License ==

See the LICENSE file for licensing, usage terms (gplv3).

== Related ==

http://imdb.com (click on "parent's guide") and http://kids-in-mind.com are two sites that tend to have
reasonably good lists of what all goes on in a movie

== Feedback ==

Feedback, including feature requests, welcome.

http://github.com/rdp/sensible-cinema
http://github.com/rdp me