Index: stream/stream_dvd.c
===================================================================
--- stream/stream_dvd.c	(revision 34269)
+++ stream/stream_dvd.c	(working copy)
@@ -586,12 +586,14 @@
           continue;
         tm += d->cell_times_table[i];
     }
-    tm += mp_dvdtimetomsec(&d->dsi_pack.dsi_gi.c_eltm);
-
+    tm += mp_dvdtimetomsec(&d->dsi_pack.dsi_gi.c_eltm); // probably the VOBU start time...
+    //if(tm/1000.0 > 3500.0) {
+//      printf("time %f ", tm/1000.0); // it's just the last NAV time, except we get called here over and over again when searching...hmm...
+    //}
     return (double)tm/1000.0;
 }
 
-static int dvd_seek_to_time(stream_t *stream, ifo_handle_t *vts_file, double sec)
+static int dvd_seek_to_time(stream_t *stream, ifo_handle_t *vts_file, double sec) // only called once to here...
 {
     unsigned int i, j, k, timeunit, ac_time, tmap_sector=0, cell_sector=0, vobu_sector=0;
     int t=0;
@@ -607,7 +609,8 @@
     if(sec > duration)
       return 0;
 
-    i=d->cur_pgc_idx;
+
+    i=d->cur_pgc_idx; // USES CURRENT pgc_idx ?
     timeunit = vts_tmapt->tmap[i].tmu;
     for(j = 0; j < vts_tmapt->tmap[i].nr_of_entries; j++) {
       ac_time = timeunit * (j + 1);
@@ -622,12 +625,21 @@
         break;
       }
     }
+    
+    if( cell_sector == 0 ) {
+      printf("didnt find this cell...hmm...\n");
+      //d->cur_pgc_idx = pgc_id-1;
+      //d->cur_pgc = vts_file->vts_pgcit->pgci_srp[pgc_id-1].pgc;
 
+    }
+    
+
+    // seek to beginning of vobu ??
     pos = ((off_t)cell_sector)<<11;
     stream_seek(stream, pos);
     do {
       stream_skip(stream, 2048);
-      t = mp_dvdtimetomsec(&d->dsi_pack.dsi_gi.c_eltm);
+      t = mp_dvdtimetomsec(&d->dsi_pack.dsi_gi.c_eltm); // weak precision...
     } while(!t);
     tm = dvd_get_current_time(stream, -1);
 
@@ -635,12 +647,12 @@
     stream_seek(stream, pos);
     //now get current time in terms of the cell+cell time offset
     memset(&d->dsi_pack.dsi_gi.c_eltm, 0, sizeof(dvd_time_t));
-    while(tm <= sec) {
-        if(!stream_skip(stream, 2048))
+    while(tm <= sec) { // TAKES FOREVER?
+        if(!stream_skip(stream, 2048)) // skip to next NAV packet [?] shouldn't it have already been able to look this up and skip straight there?
           break;
-        tm = dvd_get_current_time(stream, -1);
+        tm = dvd_get_current_time(stream, -1); 
     };
-    tmap_sector = stream->pos >> 11;
+    tmap_sector = stream->pos >> 11; // what is this magic?
 
     //search closest VOBU sector
     k=(vts_file->vts_vobu_admap->last_byte + 1 - VOBU_ADMAP_SIZE)/4; //entries in the vobu admap
Index: libvo/vo_direct3d.c
===================================================================
--- libvo/vo_direct3d.c	(revision 34269)
+++ libvo/vo_direct3d.c	(working copy)
@@ -916,7 +916,7 @@
 
     /* If the D3D device is uncooperative (not initialized), return success.
        The device will be probed for reinitialization in the next flip_page() */
-    if (!priv->d3d_device)
+     if (!priv->d3d_device || !priv->d3d_texture_osd)
         return 0;
 
     /* Lock the offscreen surface if it's not already locked. */
@@ -1029,7 +1029,7 @@
 static void draw_osd(void)
 {
     // we can not render OSD if we lost the device e.g. because it was uncooperative
-    if (!priv->d3d_device)
+     if (!priv->d3d_device || !priv->d3d_texture_osd)
         return;
 
     if (vo_osd_changed(0)) {
Index: mplayer.c
===================================================================
--- mplayer.c	(revision 34269)
+++ mplayer.c	(working copy)
@@ -144,6 +144,7 @@
 int enable_mouse_movements;
 float start_volume = -1;
 double start_pts   = MP_NOPTS_VALUE;
+float osd_add_this_much = 0.0;
 char *heartbeat_cmd;
 static int max_framesize;
 
@@ -1227,7 +1228,7 @@
 
     // Video time
     if (sh_video)
-        saddf(line, &pos, width, "V:%6.1f ", sh_video->pts);
+        saddf(line, &pos, width, "V:%6.2f ", sh_video->pts);
 
     // A-V sync
     if (mpctx->sh_audio && sh_video)
@@ -1577,15 +1578,45 @@
         return;
     }
 
+    char osd_accuracy_level[128] = "";
+    
     if (mpctx->sh_video) {
         // fallback on the timer
         if (osd_level >= 2) {
-            int len = demuxer_get_time_length(mpctx->demuxer);
+            double double_len = demuxer_get_time_length(mpctx->demuxer);
+            int len = (int) double_len;
             int percentage = -1;
             char percentage_text[10];
             char fractions_text[4];
-            int pts = demuxer_get_current_time(mpctx->demuxer);
-
+            double pts = demuxer_get_current_time(mpctx->demuxer);
+            
+            // TODO raise if no osd_add_this_much, sim?
+            printf("adding %f to %f \n", osd_add_this_much, pts); // cannot figure it out <sniff>
+            pts += osd_add_this_much;
+            printf("final: %f\n", pts);
+            if((pts - 1.0) < mpctx->sh_video->pts) {
+              printf("using mpeg ts appears larger, which if true is definitely better %f > %f - 1.0\n", mpctx->sh_video->pts, pts);
+              if(osd_add_this_much > 0) {
+                snprintf(osd_accuracy_level, 100, "EDL-high-DVD-accurate");
+              } else {
+                if(mpctx->sh_video->pts == pts) {
+                  snprintf(osd_accuracy_level, 100, "EDL-high-File-accurate");
+                } else {
+                  snprintf(osd_accuracy_level, 100, "EDL-high-DVD-accurate");
+                }
+              }
+              pts = mpctx->sh_video->pts;
+            } else {
+              // typically only DVD gets here...
+              // hmm...
+              if(osd_add_this_much > 0) {
+                snprintf(osd_accuracy_level, 100,"EDL-medium-DVD-accurate");
+              } else {
+                snprintf(osd_accuracy_level, 100,"EDL-low-DVD-accurate");
+              }
+            }
+            int seconds = (int) pts;
+            
             if (mpctx->osd_show_percentage)
                 percentage = demuxer_get_percent_pos(mpctx->demuxer);
 
@@ -1597,9 +1628,12 @@
             if (osd_fractions == 1) {
                 // print fractions as sub-second timestamp
                 snprintf(fractions_text, sizeof(fractions_text), ".%02d",
-                         (int)((mpctx->sh_video->pts - pts) * 100 + 0.5)
+                         (int)((pts - seconds)*100)
                          % 100);
             } else if (osd_fractions == 2) {
+                int a = 0/0; // teach them a lesson :P
+                // phreaky, infer frame count past the second...
+                
                 // print fractions by estimating the frame count within the
                 // second
 
@@ -1608,24 +1642,25 @@
                 // whose first frame is not exactly at timestamp 0. Therefore,
                 // we add 0.2 and cut off at the decimal point, which proved
                 // as good heuristic
-                snprintf(fractions_text, sizeof(fractions_text), ".%02d",
-                         (int)((mpctx->sh_video->pts - pts) *
-                               mpctx->sh_video->fps + 0.2));
+                //snprintf(fractions_text, sizeof(fractions_text), ".%02d",
+              //           (int)((mpctx->sh_video->pts - pts) *
+                //               mpctx->sh_video->fps + 0.2));
             } else {
                 // do not print fractions
                 fractions_text[0] = 0;
             }
 
-            if (osd_level == 3)
+            if (osd_level == 3) 
                 snprintf(osd_text_timer, 63,
-                         "%c %02d:%02d:%02d%s / %02d:%02d:%02d%s",
-                         mpctx->osd_function, pts / 3600, (pts / 60) % 60, pts % 60,
+                         "%s:%c %02d:%02d:%02d%s / %02d:%02d:%02d%s",
+                         osd_accuracy_level, mpctx->osd_function, (int)pts / 3600, (int)(pts / 60) % 60, (int)pts % 60,
                          fractions_text, len / 3600, (len / 60) % 60, len % 60,
-                         percentage_text);
-            else
-                snprintf(osd_text_timer, 63, "%c %02d:%02d:%02d%s%s",
+                          percentage_text);
+            else {
+            /*snprintf(osd_text_timer, 63, "%c %02d:%02d:%02d%s%s",
                          mpctx->osd_function, pts / 3600, (pts / 60) % 60,
-                         pts % 60, fractions_text, percentage_text);
+            pts % 60, fractions_text, percentage_text);*/
+          }
         } else
             osd_text_timer[0] = 0;
 
@@ -1643,7 +1678,7 @@
     // Clear the term osd line
     if (term_osd && osd_text[0]) {
         osd_text[0] = 0;
-        printf("%s\n", term_osd_esc);
+        printf("OSD:%s\n", term_osd_esc);
     }
 }
 
Index: cfg-mplayer.h
===================================================================
--- cfg-mplayer.h	(revision 34269)
+++ cfg-mplayer.h	(working copy)
@@ -86,6 +86,7 @@
     {"softvol", &soft_vol, CONF_TYPE_FLAG, 0, 0, 1, NULL},
     {"nosoftvol", &soft_vol, CONF_TYPE_FLAG, 0, 1, 0, NULL},
     {"softvol-max", &soft_vol_max, CONF_TYPE_FLOAT, CONF_RANGE, 10, 10000, NULL},
+//    {"add-osd", &add_this_much, CONF_TYPE_FLOAT, CONF_RANGE, 0, 10000, NULL},
     {"volstep", &volstep, CONF_TYPE_INT, CONF_RANGE, 0, 100, NULL},
     {"volume", &start_volume, CONF_TYPE_FLOAT, CONF_RANGE, -1, 10000, NULL},
     {"master", "Option -master has been removed, use -af volume instead.\n", CONF_TYPE_PRINT, 0, 0, 0, NULL},
@@ -233,7 +234,9 @@
     {"crash-debug", &crash_debug, CONF_TYPE_FLAG, CONF_GLOBAL, 0, 1, NULL},
     {"nocrash-debug", &crash_debug, CONF_TYPE_FLAG, CONF_GLOBAL, 1, 0, NULL},
 #endif
+//    {"osd-add-this-much", &osd_add_this_much, CONF_TYPE_FLOAT, CONF_RANGE, 0, 10000, NULL},
     {"osdlevel", &osd_level, CONF_TYPE_INT, CONF_RANGE, 0, 3, NULL},
+    {"osd-add", &osd_add_this_much, CONF_TYPE_FLOAT, CONF_RANGE, -100.0, 100.0, NULL},
     {"osd-duration", &osd_duration, CONF_TYPE_INT, CONF_MIN, 0, 0, NULL},
     {"osd-fractions", &osd_fractions, CONF_TYPE_INT, CONF_RANGE, 0, 2, NULL},
 #ifdef CONFIG_MENU
Index: mplayer.h
===================================================================
--- mplayer.h	(revision 34269)
+++ mplayer.h	(working copy)
@@ -27,6 +27,7 @@
 extern char **audio_driver_list;
 
 extern int osd_level;
+extern float osd_add_this_much;
 extern unsigned int osd_visible;
 extern int autosync;
 extern int frame_dropping;
Index: libmpdemux/demuxer.c
===================================================================
--- libmpdemux/demuxer.c	(revision 34269)
+++ libmpdemux/demuxer.c	(working copy)
@@ -493,7 +493,6 @@
         //codec_id = CODEC_ID_DNET;
         break;
     case MKTAG('E', 'A', 'C', '3'):
-    case MKTAG('e', 'c', '-', '3'):
         codec_id = CODEC_ID_EAC3;
         break;
     case 0x2001:
@@ -1473,6 +1472,9 @@
     return get_time_ans;
 }
 
+double last_dvd_update_pos = 0;
+double last_stream_pos_at_that_dvd_time = 0;
+
 /**
  * \brief demuxer_get_current_time() returns the time of the current play in three possible ways:
  *        either when the stream reader satisfies STREAM_CTRL_GET_CURRENT_TIME (e.g. dvd)
@@ -1480,15 +1482,43 @@
  *        0 otherwise
  * \return the current play time
  */
-int demuxer_get_current_time(demuxer_t *demuxer)
+double demuxer_get_current_time(demuxer_t *demuxer)
 {
     double get_time_ans = 0;
     sh_video_t *sh_video = demuxer->video->sh;
-    if (demuxer->stream_pts != MP_NOPTS_VALUE)
-        get_time_ans = demuxer->stream_pts;
-    else if (sh_video)
+    if (demuxer->stream_pts != MP_NOPTS_VALUE) {
+      get_time_ans = demuxer->stream_pts;
+      printf("last NAV packet was %f, mpeg at %f ", get_time_ans, sh_video->pts);
+//      30/1.001 ... hmm. ...
+      get_time_ans *= 1.001; // convert to 29.97 fps, mplayer's golden standard :P // could do this within libdvdnav uh guess...possibly all of it...
+      printf("after -> 29.97 %f\n", get_time_ans);
+      
+      double total_length = demuxer_get_time_length(demuxer);
+      
+      if(get_time_ans != last_dvd_update_pos) {
+        last_dvd_update_pos = get_time_ans;
+        last_stream_pos_at_that_dvd_time = sh_video->pts;
+        printf("new NAV packet %f at %f ", get_time_ans, sh_video->pts);
+      } else {
+        double difference = (sh_video->pts - last_stream_pos_at_that_dvd_time);
+        if(difference > 0) {
+          printf("adding difference %f ", difference);
+          get_time_ans += difference; // add the latest difference, already in 29.97 so not morphing needed. weird-z-o
+        } else {
+          printf("not adding negative diff %f", difference);
+        }
+        if(get_time_ans < 0)
+          get_time_ans = 0;
+        }
+      
+    }
+    else if (sh_video) {
+        printf("weird fella mpeg at %f ", sh_video->pts);
+      // we get here at the mpeg "splits" within them...
         get_time_ans = sh_video->pts;
-    return (int) get_time_ans;
+        
+      }
+    return get_time_ans;
 }
 
 int demuxer_get_percent_pos(demuxer_t *demuxer)
Index: libmpdemux/demuxer.h
===================================================================
--- libmpdemux/demuxer.h	(revision 34269)
+++ libmpdemux/demuxer.h	(working copy)
@@ -437,8 +437,8 @@
 int demux_info_print(demuxer_t *demuxer);
 int demux_control(demuxer_t *demuxer, int cmd, void *arg);
 
-int demuxer_get_current_time(demuxer_t *demuxer);
-double demuxer_get_time_length(demuxer_t *demuxer);
+double demuxer_get_current_time(demuxer_t *demuxer);
+double demuxer_get_time_length(demuxer_t *demuxer); 
 int demuxer_get_percent_pos(demuxer_t *demuxer);
 int demuxer_switch_audio(demuxer_t *demuxer, int index);
 int demuxer_switch_video(demuxer_t *demuxer, int index);
