== medium ==

== probably next up+low prio ==

  better timing for the saver-er...
    match better
    merge better
  speed up unit tests

== slightly lower than that even ==

== slightly lower than that ==

  auto-select EDL

  can parse IMDB (require they put in the URL by hand fer now)
    add stuffs to imdb hmmm
    IMDB easy mapping
  unit test the GUI
  can have collaborators re-selling EL's
    good license for their stuff like "public domain" or what not :P
    80/20
  can "watch as it is being ripped" (concat, watching it as it grows faster than you watch...)
  a "big download" of the whole thing (so that people can actually use it without pain...batch file even would probably work splendidly...
    leaner gem (size-wise...) but I guess some ability to have a zip downloader...hmm...
  burnable to DVD/CD multi DVD, etc.
    easily
      automagically... (call into iso blah blah blah?)
    can lop off sections to save space (?)
    can burn the extra sections, too?
  easy editor for this style of edit
  split the two projects loosely, then cleanly (project, distribution)
  partner (Jon, Karlie if interested...give beta)
  survey/beta release
  a certified clean list (?)
  better Bob EDL
  better playlist names, like with the DVD title in there :)

== DVD monetary backlog (unordered) ==

some way to choose between x,y,z when auto-select sees several
careful phrasing "if you can't afford it..."
authorize instead of paypal?
blu-ray support somehow (real-time? rip?)
legal shtuff (LICENSE)
some type of one click installer that can setup the registry...
auto-assignment of EDL's to media:
  auto-play option for DVD's (auto-start?)
    use volume label differentiation
    use spiffy differentiation for DVD's on windows
  DVD's (right click on DVD player, play with SC?)
a real website (github-y?)
instructions on how to do their own (private) or do one and submit it (public), or email their friends :P
double buffering hard drive/copying might speed things, if your HD is fast.
personalized copier might be faster than the "type" command.
merge with preferences
install VLC from .msi where needed.  Pretty low prio...
For the monetized version: nothing but cut and paste, no merging et al
mplayer EDL's

== random backlog ... note: just plow forward, to "grab" available ideas...except that for now, just what *I* plan on needing for myself (filters for what I need/want). ==

screencast of things helpful (use, creation...).
tune up the levels...
prototypes of the experimental stuff (overlay, track time while recording -> map file, specifiable levels, more?)

fix:
  0:01:01.9 next will be at 0:01:02.0s (r [or q to quit]):
  0:01:04.0 next will be at 0:01:06.5s (blanked) (r [or q to quit]): "warning--unable to track screen time for some reason" # *of course you can't track it now!*

byu.tv descriptor
youtube non full screen: work with all browsers
easier "here's how on the command line, BTW"
amazon player
a netflix player descriptor
  "just choose VLCx55" LOL
beep at them when not tracking [?]
  default on...hmm

An 'edit preferences' button et al.

Just fold if s....

a descriptor for some closed source app player...

when saving to hard drive, you can "insert" streams where desired (experimental version only)

can save stuff "for review later" as they watch it,

can "overlay-audio/video"

GUI:
 preferences for levels, etc.
  
blanker: allow for one side of the screen or another...

PISH
  release it with both until scared (?)
  split projects when scared (editor versus normal)/make projects work with direct editing, et al...
    split online from DVD, et al
  Note: get the whole thing working then release it all :P

check that youtube is working well again for all screen resolutions...

run it off a normal person (hulu, DVD). rinse and repeat

advertise on ruby flow

"ripperzy-ize"
    can record from online [huh? do I even want this?]
      maybe can record something, then extract the bad, and get a better looking video...
      low prio
      remove commercials?

DRY up :levels--it's in the ocr spec as well as the others...

unit tests run with normal ruby

back off on mouse jerking...only every so often?
  maybe increase timings as you get farther along, to accomodate for drift?

screen time change only detected... [unexpected] [rid myself of it]

Do I *need* that other window always up or not? (Get rid of it?...only do this after have a real window of my own though, that's always up)

preference for beeping at them, et al

itunes video on demand player

blockbuster "rent" on demand player

no money making for now...all volunteer...more respectful.
  or make it so it can work with an editor of some kind...like a "save here" command line snip this tuck that.
    probably only possible after creating the desktop streamer hmm

no popularizing it for now, I guess

integrate with librivox' audio so you can avoid profanity in classics.  Somehow.  This would be nice for portable players.
  You know, for static things like this, a 'pre-cutter' would sure be convenient...
  provide download of edited mp3's for people.  ahhh.
  
itunes player for profanity (music)?

make a list of "known clean" movies or what not...hmm...

an "online anybody can chat while watching this movie" (or anybody can edit this wav and listen to it as overlay...) prefer the latter.

an online applet web runnable? Why not?
  click here to watch your favorite film edited on hulu! Just click! [* yea!]
  
code refactors: "screen time change", order should be swapped in bin/x output (just cleanup)

easier installation for windows: release a zip file that they can just click on a .bat file to run it
  later: .msi?

can blank overlay with added text like "and you are one awesome klingon"

ability to record it from online/live, then apply edits.

add my stuff to imdb...? make a wiki?

user customizable levels...
  maybe even "I don't like ones that are x, y, z", or "boring level x"

with VLC/youtube non full screen, it does the annoying mouse thing needlessly (which doesn't bug as much these days...)

can overlay with wav file (would work already for VLC [?], could also "click to mute" for others...hmm...)

the muting currently is so togglesy...if VLC ever fixes itself, fix this! 

fix any/all pending tests...

can permanently black out certain coords to keep things prettier...et al
  remove black when they really move the mouse?

Linux port (call that good enough for usability on TV's...), should be...
  OS X port

blanker outer with user specifiable color
  better default color?

Auto mute/blank commercials?

transfer ownership to an LLC
  new github username

overlay/replace current playback with some url of audio or video
  user editable joke overlays (like a wiki...)
  realtime overlays (like group chat for those watching the film...)

control volume programmatically (using mouse) on the player itself.
control mute programmatically (using mouse) on the player itself.
control location programmatically (using mouse) on the player itself.

compare VLC (and other) timings with a real DVD player, and with netflix online, etc.

Have a "list of all known movies (url's)" and be able to open (IE et al) to the correct part, and start playing them, and they work...
  or known parseable imdb's

does my sweet heart have any suggestions? (make it work well for laymen)

web browser plugin?

Programmatically do all of the above, by driving VLC with libvlc (its API).
  So this would be basically tracking VLC using its libvlc callbacks, instead of screen times
  fork the Python project?
  VLC
    Allow it to record somehow (recordable)
    use VLC's web interface? telnet?
    optimize it with best appropriate iframes (LOL)

integrate with google TV...bravia...maybe...somehow...boxxee? roku?
  itunes TV? apple tv? ps3?

OCR the captioning as an auto profanity filter? (or perhaps download subtitles to be able to pre-screen), like the python fella does.